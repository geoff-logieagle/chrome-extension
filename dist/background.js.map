{"version":3,"file":"background.js","mappings":"mBAsDAA,OAAOC,OAAOC,UAAUC,aAAY,SAACC,GAE5BA,EAAIC,IAAIC,WAAW,cAAiBF,EAAIC,IAAIC,WAAW,wBACxDN,OAAOO,UAAUC,cAAc,CAC3BC,OAAQ,CAAEC,MAAON,EAAIO,IACrBC,MAAO,CAAC,eACT,WACCC,iBAAmBT,EAAIO,GACvBG,YAAa,EACbC,QAAQC,IAAIH,iBAAkBC,WAClC,GAER,G","sources":["webpack:///./src/background/background.js"],"sourcesContent":["// let initalLoad = false;\r\n// let activeCurrentTab;\r\n// let linkTabiD = null;\r\n// let startedRecording = false;\r\n// let intialHtml;\r\n\r\n// chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\r\n//     if (message.action === \"startedRecording\") {\r\n//         linkTabiD = null;\r\n//         startedRecording = true;\r\n//     }\r\n//     if (message.action == 'sendingData') {\r\n//         startedRecording = false;\r\n//         initalLoad = false;\r\n//         chrome.tabs.create({ url: chrome.runtime.getURL('preview.html') }, function (tab) {\r\n//             linkTabiD = tab.id;\r\n//             chrome.tabs.onUpdated.addListener(function listener(tabId, info) {\r\n//                 if (info.status === 'complete') {\r\n//                     chrome.runtime.sendMessage({ action: \"linkcamera\", text: message.text });\r\n//                 }\r\n//             });\r\n//         });\r\n//     }\r\n//     if (message.action === \"stopRecording\") {\r\n//         chrome.scripting.executeScript({\r\n//             target: { tabId: activeCurrentTab },\r\n//             func: () => {\r\n//                 if (window.handleStopRecording) {\r\n//                     window.handleStopRecording();\r\n//                 }\r\n//             }\r\n//         });\r\n//     }\r\n//     if (message.action === 'stopRecording' || message.action === 'sendingData') {\r\n//         await removeIframesFromAllTabs();\r\n//     }\r\n\r\n//     if (message.action === 'deleteCamera') {\r\n//         await removeIframesFromAllTabs();\r\n//     }\r\n\r\n//     if (message.action === 'injectCamera') {\r\n//         chrome.scripting.executeScript({\r\n//             target: { tabId: activeCurrentTab },\r\n//             func: () => {\r\n//                 console.log(\"dfgfd\");\r\n//                 if (window.requestUserMedia) {\r\n//                     window.requestUserMedia();\r\n//                 }\r\n//             }\r\n//         });\r\n//     }\r\n// });\r\n\r\nchrome.action.onClicked.addListener((tab) => {\r\n    debugger\r\n    if (!tab.url.startsWith(\"chrome://\") && !tab.url.startsWith(\"chrome-extension://\")) {\r\n        chrome.scripting.executeScript({\r\n            target: { tabId: tab.id },\r\n            files: ['camera.js']\r\n        }, () => {\r\n            activeCurrentTab = tab.id;\r\n            initalLoad = true;\r\n            console.log(activeCurrentTab, initalLoad);\r\n        });\r\n    }\r\n});\r\n\r\n// chrome.tabs.onActivated.addListener(function (activeInfo) {\r\n//     debugger\r\n//     chrome.tabs.get(activeInfo.tabId, function (tab) {\r\n//         if (!tab.url.startsWith(\"chrome://\") && !tab.url.startsWith(\"chrome-extension://\") &&\r\n//             initalLoad && activeCurrentTab != activeInfo.tabId && startedRecording && linkTabiD == null) {\r\n//             chrome.scripting.executeScript({\r\n//                 target: { tabId: activeInfo.tabId },\r\n//                 files: ['tabcamera.js']\r\n//             }, () => { });\r\n//         }\r\n//     });\r\n// });\r\n\r\n// chrome.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {\r\n//      debugger\r\n//     if (changeInfo.status === 'complete' &&\r\n//         !tab.url.startsWith(\"chrome://\") && !tab.url.startsWith(\"chrome-extension://\") &&\r\n//         initalLoad && startedRecording && activeCurrentTab !== tabId && linkTabiD == null) {\r\n//         chrome.scripting.executeScript({\r\n//             target: { tabId: tabId },\r\n//             files: ['tabcamera.js']\r\n//         }, () => { });\r\n//     }\r\n// });\r\n\r\n// async function removeIframesFromAllTabs() {\r\n//     const tabs = await chrome.tabs.query({});\r\n//     await Promise.all(tabs.map(async (tab) => {\r\n//         if (!tab.url.startsWith(\"chrome://\") && !tab.url.startsWith(\"chrome-extension://\")) {\r\n//             await chrome.scripting.executeScript({\r\n//                 target: { tabId: tab.id },\r\n//                 func: () => {\r\n//                     const iframeAnother = document.getElementById('camera-root');\r\n//                     const iframe = document.getElementById('tab-camera-root');\r\n//                     if (iframe) {\r\n//                         iframe.remove();\r\n//                     }\r\n//                     if (iframeAnother) {\r\n//                         iframeAnother.remove();\r\n//                     }\r\n\r\n//                     if (window.StopCamera) {\r\n//                         window.StopCamera();\r\n//                     }\r\n//                 }\r\n//             });\r\n//         }\r\n//     }));\r\n// }\r\n"],"names":["chrome","action","onClicked","addListener","tab","url","startsWith","scripting","executeScript","target","tabId","id","files","activeCurrentTab","initalLoad","console","log"],"sourceRoot":""}